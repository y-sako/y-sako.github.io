renv::status()
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(tidyverse)
# p_load(magrittr)
p_load(janitor)
p_load(Robyn)
p_load(reactable)
p_load(DT)
p_load(reticulate) # remotes::install_github("rstudio/reticulate")
# install tidyverse
# # for systemfonts
# sudo apt-get install libfontconfig1-dev
# sudo apt-get install libharfbuzz-dev libfribidi-dev
# # for ragg
# sudo apt-get install libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev
# install.packages("tidyverse")
# install Robyn
# # for systemfonts
# sudo apt-get install libfontconfig1-dev
# sudo apt-get install libharfbuzz-dev libfribidi-dev
# # for ragg
# sudo apt-get install libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev
# install.packages("Robyn")
# # for nloptr
# sudo apt-get install cmake
# install.packages("rstan")
# # 容量注意
# Robynのサンプルデータ
dat_robyn =
dt_simulated_weekly %>%
tibble() %>%
clean_names() %>%
select(
week = date,
revenue,
# paid
tv_cost = tv_s,
ooh_cost = ooh_s,
print_cost = print_s,
facebook_cost = facebook_s,
facebook_impression = facebook_i,
search_cost = search_s,
search_click = search_clicks_p,
newsletter_cost = newsletter,
# base
competitor_sales = competitor_sales_b,
events = events
) %>%
mutate(event_1 = case_when(events == "event1" ~ 1, .default = 0)) %>%
mutate(event_2 = case_when(events == "event2" ~ 1, .default = 0)) %>%
select(-events)
dat_robyn %>%
head() %>% reactable()
# 変数マスタ
mst_vars = tibble::tribble(
~var_category, ~var_type,     ~value_type,  ~var_name,
"time",        "week",        "week",       "week",
"dep_var",     "dep_var",     "revenue",    "revenue",
"paid_media",  "tv",          "cost",       "tv_cost",
"paid_media",  "ooh",         "cost",       "ooh_cost",
"paid_media",  "print",       "cost",       "print_cost",
"paid_media",  "facebook",    "cost",       "facebook_cost",
"paid_media",  "facebook",    "imp",        "facebook_impression",
"paid_media",  "search",      "cost",       "search_cost",
"paid_media",  "search",      "click",      "search_click",
"paid_media",  "newsletter",  "cost",       "newsletter_cost",
"baseline",    "competitor",  "sales",      "competitor_sales",
"baseline",    "event_1",     "flag",       "event_1",
"baseline",    "event_2",     "flag",       "event_2",
) %>%
mutate(mod_flag = case_when(
var_name %in% c(
"tv_cost",
"ooh_cost",
"print_cost",
"facebook_impression",
"search_click",
"newsletter_cost",
"competitor_sales",
"event_1",
"event_2"
) ~ 1,
.default = 0
))
mst_vars %>% reactable()
lst_paid_media_vars =
mst_vars %>%
filter(var_category == "paid_media",
mod_flag == 1) %>%
pull(var_name)
lst_paid_media_cost =
mst_vars %>%
filter(value_type == "cost") %>%
pull(var_name)
lst_ctrl_vars =
mst_vars %>%
filter(var_category != "paid_media",
mod_flag == 1) %>%
pull(var_name)
reticulate::repl_python()
mst_week =
dat_robyn %>%
select(week) %>%
mutate(t = row_number())
mst_media =
tibble(paid_media_vars = lst_paid_media_vars) %>%
separate(paid_media_vars, "_", into = c("media", "vars")) %>%
mutate(channel_no = row_number() - 1) %>%
mutate(channel_no = str_c("channel_", channel_no))
dat_output =
py$output_df %>%
tibble() %>%
mutate(variable = str_remove(variable, "contribution")) %>%
mutate(variable = str_remove(variable, "\\s")) %>%
left_join(mst_media, by = c("variable" = "channel_no")) %>%
select(-variable) %>%
rename(variable = media) %>%
left_join(mst_week, by = c("period" = "t"))
dat_output %>%
# mutate(category =
#          factor(category, levels = c("paid_media", "baseline"))) %>%
ggplot() +
geom_bar(aes(x=week, y=value, fill=variable, group=variable),
stat="identity", alpha=0.5) +
scale_y_continuous(labels = scales::comma_format())
dat_output %>% reactable
reticulate::repl_python()
