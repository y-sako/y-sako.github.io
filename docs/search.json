[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "VSCode&R用にlanguageserverをインストール\n\n\n\n\n\n\nVSCode\n\n\nR\n\n\n\n\n\n\n\n\n\nApr 15, 2024\n\n\ny-sako\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 10, 2024\n\n\ny-sako\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "VSCode&Rでlanguageserverをインストール",
    "section": "",
    "text": "こちらのブログはQuartoで作成しています。\n特に執筆環境を簡単に再現するために\n\nエディタはvscode\ndevcontainerで環境構築\nRのパッケージ管理はrenv\n\nを採用してみました。\n意気揚々と初記事を書こうと息巻いていたらvscodeのセットアップでいきなりハマったので解決策をメモ。"
  },
  {
    "objectID": "posts/welcome/index.html#test2",
    "href": "posts/welcome/index.html#test2",
    "title": "Welcome To My Blog",
    "section": "test2",
    "text": "test2\nnyaa"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "y-sako",
    "section": "",
    "text": "バックグラウンドはマーケティングサイエンス/消費者行動論。\n現在はリサーチ会社でデータサイエンスっぽい事してます。\nQuarto推しなので学習ノート兼ブログ作ってみました。"
  },
  {
    "objectID": "posts/welcome/index.html#はじめに",
    "href": "posts/welcome/index.html#はじめに",
    "title": "VSCode&Rでlanguageserverをインストール",
    "section": "",
    "text": "こちらのブログはQuartoで作成しています。\n特に執筆環境を簡単に再現するために\n\nエディタはvscode\ndevcontainerで環境構築\nRのパッケージ管理はrenv\n\nを採用してみました。\n意気揚々と初記事を書こうと息巻いていたらvscodeのセットアップでいきなりハマったので解決策をメモ。"
  },
  {
    "objectID": "posts/welcome/index.html#本題",
    "href": "posts/welcome/index.html#本題",
    "title": "VSCode&Rでlanguageserverをインストール",
    "section": "本題",
    "text": "本題\nまずはrenv::init()してlanguageserverをインスト\n\nrenv::init()\ninstall.packages(\"languageserver\")\n\nしようと思ったら弾かれる、、\nいくつかのパッケージが上手く入っていなかったので順に見ていくと、 だいたいxml2パッケージのインストールで止まっているようでした。\nhttps://github.com/r-lib/xml2/issues/223\nなんてことはなくコンテナ環境にlibxml2-devが入っていなかったので\n\nsudo apt-get install libxml2-dev\n\n入れてあげるとすんなり解決しました、Dockerfileに追記しとこ、、\n\nlibrary(languageserver)\nrenv::snapshot()"
  },
  {
    "objectID": "posts/welcome/index.html#section",
    "href": "posts/welcome/index.html#section",
    "title": "VSCode&Rでlanguageserverをインストール",
    "section": "",
    "text": "こちらのブログはQuartoで作成しています。\n特に執筆環境を簡単に再現するために\n\nエディタはvscode\ndevcontainerで環境構築\nRのパッケージ管理はrenv\n\nを採用してみました。\n意気揚々と記事を書こうと思っていたらvscodeのセットアップでいきなりハマったので解決策をメモしておきます。"
  },
  {
    "objectID": "posts/welcome/index.html#section-1",
    "href": "posts/welcome/index.html#section-1",
    "title": "VSCode&Rでlanguageserverをインストール",
    "section": "",
    "text": "まずはrenv::init()してlanguageserverをインスト\n\nrenv::init()\ninstall.packages(\"languageserver\")\n\nいくつかのパッケージが上手く入っていなかったので順に見ていくと、 だいたいxml2パッケージのインストールで止まっているようでした。\nhttps://github.com/r-lib/xml2/issues/223\nなんてことはなくコンテナ環境にlibxml2-devが入っていなかったので\n\nsudo apt-get install libxml2-dev\n\nとして入れてあげるとすんなり解決しました、、\n\nlibrary(languageserver)\nrenv::snapshot()"
  },
  {
    "objectID": "posts/welcome/index.html#おわりに",
    "href": "posts/welcome/index.html#おわりに",
    "title": "VSCode&Rでlanguageserverをインストール",
    "section": "おわりに",
    "text": "おわりに\nまあ、postも問題無さそう&renvもvscode上での補完も効いているっぽいので今日の所はこれで"
  },
  {
    "objectID": "posts/vscode-r-languageserver/index.html",
    "href": "posts/vscode-r-languageserver/index.html",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "",
    "text": "VSCode&R用にlanguageserverをインストール、出来なかったので解決策をメモ。"
  },
  {
    "objectID": "posts/vscode-r-languageserver/index.html#はじめに",
    "href": "posts/vscode-r-languageserver/index.html#はじめに",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "",
    "text": "VSCode&R用にlanguageserverをインストール、出来なかったので解決策をメモ。"
  },
  {
    "objectID": "posts/vscode-r-languageserver/index.html#余談",
    "href": "posts/vscode-r-languageserver/index.html#余談",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "余談",
    "text": "余談\nこちらのブログはQuartoで作成しており、特に執筆環境を簡単に再現するために\n\nエディタはvscode\ndevcontainerで環境構築\nRのパッケージ管理はrenv\n\nを採用してみました。なんかモダンだね嬉しいねと、意気揚々と初記事を書こうと息巻いていたらvscodeのセットアップでいきなりハマったので悲しい気持ちになりました。"
  },
  {
    "objectID": "posts/vscode-r-languageserver/index.html#本題",
    "href": "posts/vscode-r-languageserver/index.html#本題",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "本題",
    "text": "本題\nまずはrenv::init()してlanguageserverをインスト\n\nrenv::init()\ninstall.packages(\"languageserver\")\n\nしようと思ったら弾かれる、、\nいくつかのパッケージが上手く入っていなかったので順に見ていくと、 だいたいxml2パッケージのインストールで止まっているようでした。\nなんてことはなくコンテナ環境にlibxml2-devが入っていなかったので\n\nsudo apt-get install libxml2-dev\n\n入れてあげるとすんなり解決しました、一旦保存して後でDockerfileに追記しとこ、、\n\nlibrary(languageserver)\nrenv::snapshot()"
  },
  {
    "objectID": "posts/vscode-r-languageserver/index.html#おわりに",
    "href": "posts/vscode-r-languageserver/index.html#おわりに",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "おわりに",
    "text": "おわりに\nまあ、postも問題無さそう&renvもvscode上での補完も効いているっぽいので今日の所はこれで"
  },
  {
    "objectID": "posts/vscode-r-languageserver/index.html#参考",
    "href": "posts/vscode-r-languageserver/index.html#参考",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "参考",
    "text": "参考\nhttps://github.com/r-lib/xml2/issues/223\nhttps://staffblog.amelieff.jp/entry/2019/12/02/120000"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html",
    "href": "draft/lightweight-mmm/index.html",
    "title": "LightWeightMMMをRobynサンプルデータで試す",
    "section": "",
    "text": "if (!require(\"pacman\")) install.packages(\"pacman\"); library(pacman)\n\n 要求されたパッケージ pacman をロード中です \n\np_load(tidyverse)\n# p_load(magrittr)\np_load(janitor)\np_load(Robyn)\np_load(reactable)\np_load(DT)\np_load(reticulate) # remotes::install_github(\"rstudio/reticulate\")\n# install tidyverse\n\n# # for systemfonts\n# sudo apt-get install libfontconfig1-dev\n# sudo apt-get install libharfbuzz-dev libfribidi-dev\n# # for ragg\n# sudo apt-get install libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev\n\n# install.packages(\"tidyverse\")\n\n# install Robyn\n\n# # for systemfonts\n# sudo apt-get install libfontconfig1-dev\n# sudo apt-get install libharfbuzz-dev libfribidi-dev\n# # for ragg\n# sudo apt-get install libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev\n\n# install.packages(\"Robyn\")\n# # for nloptr\n# sudo apt-get install cmake\n\n# install.packages(\"rstan\")\n# # 容量注意"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#はじめに",
    "href": "draft/lightweight-mmm/index.html#はじめに",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "",
    "text": "VSCode&R用にlanguageserverをインストール、出来なかったので解決策をメモ。"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#余談",
    "href": "draft/lightweight-mmm/index.html#余談",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "余談",
    "text": "余談\nこちらのブログはQuartoで作成しており、特に執筆環境を簡単に再現するために\n\nエディタはvscode\ndevcontainerで環境構築\nRのパッケージ管理はrenv\n\nを採用してみました。なんかモダンだね嬉しいねと、意気揚々と初記事を書こうと息巻いていたらvscodeのセットアップでいきなりハマったので悲しい気持ちになりました。"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#本題",
    "href": "draft/lightweight-mmm/index.html#本題",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "本題",
    "text": "本題\nまずはrenv::init()してlanguageserverをインスト\n\nrenv::init()\ninstall.packages(\"languageserver\")\n\nしようと思ったら弾かれる、、\nいくつかのパッケージが上手く入っていなかったので順に見ていくと、 だいたいxml2パッケージのインストールで止まっているようでした。\nなんてことはなくコンテナ環境にlibxml2-devが入っていなかったので\n\nsudo apt-get install libxml2-dev\n\n入れてあげるとすんなり解決しました、一旦保存して後でDockerfileに追記しとこ、、\n\nlibrary(languageserver)\nrenv::snapshot()"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#おわりに",
    "href": "draft/lightweight-mmm/index.html#おわりに",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "おわりに",
    "text": "おわりに\nまあ、postも問題無さそう&renvもvscode上での補完も効いているっぽいので今日の所はこれで"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#参考",
    "href": "draft/lightweight-mmm/index.html#参考",
    "title": "VSCode&R用にlanguageserverをインストール",
    "section": "参考",
    "text": "参考\nhttps://github.com/r-lib/xml2/issues/223\nhttps://staffblog.amelieff.jp/entry/2019/12/02/120000"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#セットアップ",
    "href": "draft/lightweight-mmm/index.html#セットアップ",
    "title": "LightWeightMMMをRobynサンプルデータで試す",
    "section": "",
    "text": "if (!require(\"pacman\")) install.packages(\"pacman\"); library(pacman)\n\n 要求されたパッケージ pacman をロード中です \n\np_load(tidyverse)\n# p_load(magrittr)\np_load(janitor)\np_load(Robyn)\np_load(reactable)\np_load(DT)\np_load(reticulate) # remotes::install_github(\"rstudio/reticulate\")\n# install tidyverse\n\n# # for systemfonts\n# sudo apt-get install libfontconfig1-dev\n# sudo apt-get install libharfbuzz-dev libfribidi-dev\n# # for ragg\n# sudo apt-get install libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev\n\n# install.packages(\"tidyverse\")\n\n# install Robyn\n\n# # for systemfonts\n# sudo apt-get install libfontconfig1-dev\n# sudo apt-get install libharfbuzz-dev libfribidi-dev\n# # for ragg\n# sudo apt-get install libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev\n\n# install.packages(\"Robyn\")\n# # for nloptr\n# sudo apt-get install cmake\n\n# install.packages(\"rstan\")\n# # 容量注意"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#データ",
    "href": "draft/lightweight-mmm/index.html#データ",
    "title": "LightWeightMMMをRobynサンプルデータで試す",
    "section": "データ",
    "text": "データ\n\n# Robynのサンプルデータ\ndat_robyn = \n  dt_simulated_weekly %&gt;% \n  tibble() %&gt;% \n  clean_names() %&gt;% \n  select(\n    week = date,              \n    revenue,\n    # paid\n    tv_cost = tv_s,\n    ooh_cost = ooh_s,           \n    print_cost = print_s,\n    facebook_cost = facebook_s,\n    facebook_impression = facebook_i,\n    search_cost = search_s,\n    search_click = search_clicks_p,\n    newsletter_cost = newsletter,\n    # base\n    competitor_sales = competitor_sales_b,\n    events = events\n  ) %&gt;% \n  mutate(event_1 = case_when(events == \"event1\" ~ 1, .default = 0)) %&gt;% \n  mutate(event_2 = case_when(events == \"event2\" ~ 1, .default = 0)) %&gt;% \n  select(-events)\n\ndat_robyn %&gt;% \n  head() %&gt;% reactable()\n\n\n\n\n# 変数マスタ\nmst_vars = tibble::tribble(\n  ~var_category, ~var_type,     ~value_type,  ~var_name,\n  \"time\",        \"week\",        \"week\",       \"week\",\n  \"dep_var\",     \"dep_var\",     \"revenue\",    \"revenue\",\n  \"paid_media\",  \"tv\",          \"cost\",       \"tv_cost\",\n  \"paid_media\",  \"ooh\",         \"cost\",       \"ooh_cost\",\n  \"paid_media\",  \"print\",       \"cost\",       \"print_cost\",\n  \"paid_media\",  \"facebook\",    \"cost\",       \"facebook_cost\",\n  \"paid_media\",  \"facebook\",    \"imp\",        \"facebook_impression\",\n  \"paid_media\",  \"search\",      \"cost\",       \"search_cost\",\n  \"paid_media\",  \"search\",      \"click\",      \"search_click\",\n  \"paid_media\",  \"newsletter\",  \"cost\",       \"newsletter_cost\",\n  \"baseline\",    \"competitor\",  \"sales\",      \"competitor_sales\",\n  \"baseline\",    \"event_1\",     \"flag\",       \"event_1\",\n  \"baseline\",    \"event_2\",     \"flag\",       \"event_2\",\n) %&gt;% \n  mutate(mod_flag = case_when(\n    var_name %in% c(\n      \"tv_cost\",\n      \"ooh_cost\",\n      \"print_cost\",\n      \"facebook_impression\",\n      \"search_click\",\n      \"newsletter_cost\",\n      \"competitor_sales\",\n      \"event_1\",\n      \"event_2\"\n    ) ~ 1,\n    .default = 0\n  ))\n\nmst_vars %&gt;% reactable()\n\n\n\n\nlst_paid_media_vars = \n  mst_vars %&gt;% \n  filter(var_category == \"paid_media\", \n         mod_flag == 1) %&gt;% \n  pull(var_name)\n\nlst_paid_media_cost = \n  mst_vars %&gt;% \n  filter(value_type == \"cost\") %&gt;% \n  pull(var_name)\n\nlst_ctrl_vars = \n  mst_vars %&gt;% \n  filter(var_category != \"paid_media\", \n         mod_flag == 1) %&gt;% \n  pull(var_name)"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#モデリング",
    "href": "draft/lightweight-mmm/index.html#モデリング",
    "title": "LightWeightMMMをRobynサンプルデータで試す",
    "section": "モデリング",
    "text": "モデリング\n\n# !pip install pandas\n# !pip install polars\n# !pip install pyarrow\n# !pip install matplotlib\n# !pip install jax\n# !pip install numpyro\n# !pip install arviz\n# !pip install itables\n# !pip install lightweight_mmm\n# # sudo apt-get install libhdf5-serial-dev\n\n# セットアップ\n## ライブラリ\nimport pathlib \nimport os\nimport pandas as pd\nimport polars as pl\nimport jax.numpy as jnp\nimport jax\nimport numpyro\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom lightweight_mmm import optimize_media\nfrom lightweight_mmm import plot\nfrom lightweight_mmm import preprocessing\nfrom lightweight_mmm import utils\nfrom lightweight_mmm import lightweight_mmm\nimport arviz as az\nfrom itables import show\n\n## シードを固定\nSEED = 777\n\ndat_mod = r.dat_robyn\nlst_paid_media_vars = r.lst_paid_media_vars\nlst_paid_media_cost = r.lst_paid_media_cost\nlst_ctrl_vars = r.lst_ctrl_vars\n\ndata_size = len(dat_mod)\n\ntarget = jnp.array(dat_mod[\"revenue\"])\nmedia_data = jnp.array(dat_mod[lst_paid_media_vars])\ncost_data = jnp.array(dat_mod[lst_paid_media_cost])\ncosts = jnp.sum(media_data, axis=0)\nextra_features = jnp.array(dat_mod[lst_ctrl_vars])\n\n#%%\n\n# 学習期間と検証期間で分割\nsplit_point = data_size - 13\nmedia_data_train = media_data[:split_point, ...]\nmedia_data_test = media_data[split_point:, ...]\nextra_features_train = extra_features[:split_point, ...]\nextra_features_test = extra_features[split_point:, ...]\ntarget_train = target[:split_point]\n# スケーラー\nmedia_scaler = preprocessing.CustomScaler(divide_operation=jnp.mean)\nextra_features_scaler = preprocessing.CustomScaler(divide_operation=jnp.mean)\ntarget_scaler = preprocessing.CustomScaler(divide_operation=jnp.mean)\ncost_scaler = preprocessing.CustomScaler(divide_operation=jnp.mean)\n# スケーリング\nmedia_data_train = media_scaler.fit_transform(media_data_train)\nextra_features_train = extra_features_scaler.fit_transform(extra_features_train)\ntarget_train = target_scaler.fit_transform(target_train)\ncosts = cost_scaler.fit_transform(costs)\n\n#%%\n# モデルパス\npath_model = pathlib.Path(\"/workspace/draft/lightweight-mmm/model/LMMM.pkl\")\n\n#%%\nif path_model.exists():\n    mmm = utils.load_model(file_path=str(path_model))\nelse:\n    # モデルの設定\n    mmm = lightweight_mmm.LightweightMMM(model_name=\"hill_adstock\")\n    # MCMCの設定\n    N_CHAINS = 2\n    number_warmup = 2000\n    number_samples = 2000\n    # モデルの推定\n    mmm.fit(\n        media=media_data_train,\n        media_prior=costs,\n        target=target_train,\n        extra_features=extra_features_train,\n        number_warmup=number_warmup,\n        number_samples=number_samples,\n        number_chains=N_CHAINS,\n        seed=SEED\n        )\n    # モデルの保存\n    utils.save_model(media_mix_model=mmm, file_path=str(path_model))\n    \nmmm.print_summary()\n\n\n                                         mean       std    median      5.0%     95.0%     n_eff     r_hat\n             coef_extra_features[0]      0.78      0.09      0.78      0.65      0.93   1024.14      1.00\n             coef_extra_features[1]      0.00      0.00      0.00      0.00      0.01    107.91      1.03\n             coef_extra_features[2]      0.00      0.00      0.00      0.00      0.00    395.90      1.01\n                      coef_media[0]      0.01      0.01      0.01      0.00      0.02   2238.50      1.00\n                      coef_media[1]      0.03      0.02      0.02      0.00      0.06     92.42      1.02\n                      coef_media[2]      0.00      0.00      0.00      0.00      0.00    144.89      1.02\n                      coef_media[3]      0.37      0.93      0.14      0.00      0.66    639.73      1.00\n                      coef_media[4]      0.01      0.01      0.01      0.00      0.02     99.41      1.03\n                      coef_media[5]      0.00      0.00      0.00      0.00      0.01     89.94      1.02\n                      coef_trend[0]     -0.00      0.00     -0.00     -0.01      0.00    444.98      1.01\n                         expo_trend      0.71      0.20      0.64      0.50      1.02     20.32      1.12\n             gamma_seasonality[0,0]      0.02      0.02      0.02     -0.01      0.05    797.17      1.01\n             gamma_seasonality[0,1]      0.10      0.05      0.10      0.02      0.18   1001.72      1.00\n             gamma_seasonality[1,0]     -0.01      0.01     -0.01     -0.03      0.02   1338.00      1.00\n             gamma_seasonality[1,1]      0.03      0.02      0.03     -0.00      0.05    114.77      1.02\nhalf_max_effective_concentration[0]      0.96      0.92      0.69      0.00      2.15    333.86      1.01\nhalf_max_effective_concentration[1]      0.96      0.96      0.67      0.00      2.16    431.31      1.01\nhalf_max_effective_concentration[2]      1.30      1.33      0.81      0.00      3.65     28.77      1.09\nhalf_max_effective_concentration[3]      1.44      1.20      1.21      0.00      3.03   1921.76      1.00\nhalf_max_effective_concentration[4]      0.93      1.00      0.60      0.00      2.26    250.55      1.01\nhalf_max_effective_concentration[5]      1.14      1.05      0.82      0.00      2.32    361.55      1.01\n                       intercept[0]      0.14      0.09      0.13      0.00      0.25    416.46      1.00\n                      lag_weight[0]      0.57      0.26      0.60      0.19      0.98    339.91      1.01\n                      lag_weight[1]      0.66      0.24      0.68      0.31      1.00     85.79      1.03\n                      lag_weight[2]      0.68      0.23      0.73      0.33      1.00   1765.05      1.00\n                      lag_weight[3]      0.77      0.25      0.89      0.36      1.00    370.40      1.01\n                      lag_weight[4]      0.65      0.23      0.67      0.32      1.00   1438.28      1.00\n                      lag_weight[5]      0.66      0.22      0.72      0.33      1.00   2609.89      1.01\n                           sigma[0]      0.14      0.01      0.14      0.13      0.15    367.77      1.01\n                           slope[0]      1.35      1.08      1.12      0.00      2.66    539.09      1.01\n                           slope[1]      1.13      0.99      0.80      0.00      2.45   1417.20      1.01\n                           slope[2]      1.02      0.96      0.81      0.00      2.15   3561.81      1.00\n                           slope[3]      1.37      1.57      0.81      0.00      3.82     22.95      1.09\n                           slope[4]      0.97      1.05      0.60      0.00      2.27    983.10      1.01\n                           slope[5]      1.24      1.30      0.76      0.00      3.37     28.31      1.08\n\nNumber of divergences: 923\n\n# dat_summary = az.summary(mmm._mcmc)\n# show(dat_summary)\n\n# # # !pip install IPython\n# from IPython.display import display, Latex, HTML\n# import IPython\n# show(dat_summary)\n\n\n\n# HTML(show(dat_summary))\n\n# dat_summary.to_html()\n\n# print(show(dat_summary))\n\n# %%\n\n# 貢献度分解\ncontribution_df = plot.create_media_baseline_contribution_df(\n    media_mix_model=mmm,\n    target_scaler=target_scaler,\n    )\ncontribution_df = pl.from_pandas(contribution_df)\ncontribution_df = contribution_df.select([\n  pl.col(\"period\"), \n  pl.col(\"avg_prediction\"), \n  pl.col(\"^*contribution$\")\n  ])\ncontribution_df = contribution_df.melt(\n  id_vars = [\"period\", \"avg_prediction\"],\n  value_vars = contribution_df.select([pl.col(\"^*contribution$\")]).columns\n  )\n\ntarget_df = pl.DataFrame(\n  pd.DataFrame(\n    target_scaler.inverse_transform(target_train),\n    columns=[\"target\"]\n    )\n  ).with_row_index(\n    name=\"period\", \n    offset=1\n  ).with_columns(\n    pl.col(\"period\").cast(pl.Int64)\n  )\n\noutput_df = contribution_df.join(\n  target_df, \n  on=\"period\", \n  how=\"left\"\n  ).with_columns(\n    (pl.col(\"target\")/pl.col(\"avg_prediction\")).alias(\"scaleback_rate\")\n  ).with_columns(\n    (pl.col(\"value\")*pl.col(\"scaleback_rate\")).alias(\"scaleback_value\")\n  ).select([\n    \"period\",\n    \"variable\",\n    \"scaleback_value\"\n  ]).rename({\n    \"scaleback_value\": \"value\"\n  })\n\noutput_df = output_df.to_pandas()\n\n#%%\nmedia_contribution, roi_hat = mmm.get_posterior_metrics(\n  target_scaler=target_scaler, \n  cost_scaler=cost_scaler\n  )\n\npd.DataFrame(media_contribution)\n\n             0         1         2         3         4         5\n0     0.001595  0.017061  0.003353  0.036563  0.006335  0.000145\n1     0.001994  0.025800  0.000413  0.015895  0.003179  0.007026\n2     0.007281  0.019592  0.002900  0.051503  0.006274  0.000723\n3     0.003985  0.015607  0.000232  0.027275  0.008803  0.003321\n4     0.000304  0.004794  0.001213  0.014328  0.000512  0.001604\n...        ...       ...       ...       ...       ...       ...\n3995  0.004504  0.008460  0.002019  0.071672  0.006468  0.005311\n3996  0.005061  0.014142  0.000438  0.022133  0.001990  0.002083\n3997  0.003232  0.011928  0.003034  0.000035  0.006799  0.005756\n3998  0.003413  0.038470  0.002788  0.006888  0.006764  0.002579\n3999  0.002852  0.035792  0.003808  0.000017  0.005349  0.002627\n\n[4000 rows x 6 columns]\n\npd.DataFrame(roi_hat)\n\n             0         1         2         3         4         5\n0     0.059894  0.220028  0.501165  0.002499  0.208359  0.010854\n1     0.074769  0.332304  0.061681  0.001085  0.104426  0.524106\n2     0.276808  0.255816  0.438846  0.003565  0.208925  0.054689\n3     0.150430  0.202354  0.034861  0.001874  0.291105  0.249357\n4     0.011314  0.061348  0.179901  0.000972  0.016698  0.118844\n...        ...       ...       ...       ...       ...       ...\n3995  0.168277  0.108568  0.300278  0.004875  0.211673  0.394730\n3996  0.187148  0.179626  0.064419  0.001490  0.064475  0.153232\n3997  0.121295  0.153739  0.453307  0.000002  0.223510  0.429719\n3998  0.127529  0.493759  0.414815  0.000469  0.221430  0.191712\n3999  0.108079  0.465873  0.574521  0.000001  0.177563  0.198021\n\n[4000 rows x 6 columns]\n\nfig = plot.plot_model_fit(mmm, target_scaler=target_scaler)\nfig.show()\nplt.show()\n\n\n\n\n\n\n\nprint(fig)\n\nFigure(640x480)\n\n\n# #%%\n# help(lightweight_mmm)\n\n# # %%\n# for item in dir(lightweight_mmm):\n#     print(item)\n\n# # %%\n# [item for item in dir(lightweight_mmm.LightweightMMM)]\n\n# # %%\n# mmm.model_name\n# %%\n\n# contribution_colname = [col for col in raw_contribution_df.columns.to_list() if col.endswith(\"contribution\")]\n# contribution_colname\n# # .str.endswith(\"contribution\")\n\n# # 貢献度の合計が合致しているかを確認\n# contribution_df.group_by(\"period\").agg([\n#     pl.col(\"avg_prediction\").unique().first(),\n#     pl.col(\"value\").sum().alias(\"total\")\n# ]).sort(by=\"period\")\n\n# # チェック\n# contribution_df.join(\n#   target_df, \n#   on=\"period\", \n#   how=\"left\"\n#   ).with_columns(\n#     (pl.col(\"target\")/pl.col(\"avg_prediction\")).alias(\"scaleback_rate\")\n#   ).with_columns(\n#     (pl.col(\"value\")*pl.col(\"scaleback_rate\")).alias(\"scaleback_value\")\n#   ).group_by(\"period\").agg([\n#     pl.col(\"avg_prediction\").unique().first(),\n#     pl.col(\"target\").unique().first(),\n#     pl.col(\"scaleback_value\").sum().alias(\"total\")\n#   ]).sort(by=\"period\")\n\n\n# p_load(reticulate)\n# py$dat_summary %&gt;% \n#   rownames_to_column(\"parameter\") %&gt;% \n#   tibble() %&gt;% \n#   filter(str_detect(parameter, \"^media_transformed\")) %&gt;% \n#   select(parameter, r_hat) %&gt;% \n#   datatable()\n\n\nmst_week = \n  dat_robyn %&gt;% \n  select(week) %&gt;% \n  mutate(t = row_number())\n\nmst_media = \n  tibble(paid_media_vars = lst_paid_media_vars) %&gt;% \n  separate(paid_media_vars, \"_\", into = c(\"media\", \"vars\")) %&gt;% \n  mutate(channel_no = row_number() - 1) %&gt;% \n  mutate(channel_no = str_c(\"channel_\", channel_no))\n\ndat_output = \n  py$output_df %&gt;% \n  tibble() %&gt;% \n  mutate(variable = str_remove(variable, \"contribution\")) %&gt;% \n  mutate(variable = str_remove(variable, \"\\\\s\")) %&gt;% \n  left_join(mst_media, by = c(\"variable\" = \"channel_no\")) %&gt;% \n  select(-variable) %&gt;% \n  rename(variable = media) %&gt;% \n  left_join(mst_week, by = c(\"period\" = \"t\"))\n\ndat_output %&gt;% \n  # mutate(category = \n  #          factor(category, levels = c(\"paid_media\", \"baseline\"))) %&gt;% \n  ggplot() + \n  geom_bar(aes(x=week, y=value, fill=variable, group=variable), \n           stat=\"identity\", alpha=0.5) +\n  scale_y_continuous(labels = scales::comma_format())\n\n\n\n\n\n\n\ndat_output %&gt;% reactable"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#環境をアップデート",
    "href": "draft/lightweight-mmm/index.html#環境をアップデート",
    "title": "LightWeightMMMをRobynサンプルデータで試す",
    "section": "環境をアップデート",
    "text": "環境をアップデート"
  },
  {
    "objectID": "draft/lightweight-mmm/index.html#pyhtonテスト",
    "href": "draft/lightweight-mmm/index.html#pyhtonテスト",
    "title": "LightWeightMMMをRobynサンプルデータで試す",
    "section": "Pyhtonテスト",
    "text": "Pyhtonテスト\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n\n\n\n\n\n\n\n\n\nplot.plot_model_fit(mmm, target_scaler=target_scaler).show()"
  }
]